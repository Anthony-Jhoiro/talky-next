/* tslint:disable */
/* eslint-disable */
/**
 * Social API
 * Documentation of Social API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateFriendRequestRequestDto } from '../models';
// @ts-ignore
import { FriendRequestDto } from '../models';
// @ts-ignore
import { UpdateFriendRequestRequestDto } from '../models';
/**
 * FriendRequestControllerApi - axios parameter creator
 * @export
 */
export const FriendRequestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a friend request
         * @param {CreateFriendRequestRequestDto} createFriendRequestRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendRequest: async (createFriendRequestRequestDto: CreateFriendRequestRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFriendRequestRequestDto' is not null or undefined
            assertParamExists('createFriendRequest', 'createFriendRequestRequestDto', createFriendRequestRequestDto)
            const localVarPath = `/api/v1/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFriendRequestRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List friend requests of the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFriendRequests: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the status of a friend request (ACCEPTED / DENIED)
         * @param {string} requestId 
         * @param {UpdateFriendRequestRequestDto} updateFriendRequestRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFriendRequest: async (requestId: string, updateFriendRequestRequestDto: UpdateFriendRequestRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('updateFriendRequest', 'requestId', requestId)
            // verify required parameter 'updateFriendRequestRequestDto' is not null or undefined
            assertParamExists('updateFriendRequest', 'updateFriendRequestRequestDto', updateFriendRequestRequestDto)
            const localVarPath = `/api/v1/requests/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFriendRequestRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendRequestControllerApi - functional programming interface
 * @export
 */
export const FriendRequestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FriendRequestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a friend request
         * @param {CreateFriendRequestRequestDto} createFriendRequestRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFriendRequest(createFriendRequestRequestDto: CreateFriendRequestRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FriendRequestDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFriendRequest(createFriendRequestRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List friend requests of the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFriendRequests(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<FriendRequestDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFriendRequests(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change the status of a friend request (ACCEPTED / DENIED)
         * @param {string} requestId 
         * @param {UpdateFriendRequestRequestDto} updateFriendRequestRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFriendRequest(requestId: string, updateFriendRequestRequestDto: UpdateFriendRequestRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFriendRequest(requestId, updateFriendRequestRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FriendRequestControllerApi - factory interface
 * @export
 */
export const FriendRequestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FriendRequestControllerApiFp(configuration)
    return {
        /**
         * Create a friend request
         * @param {CreateFriendRequestRequestDto} createFriendRequestRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendRequest(createFriendRequestRequestDto: CreateFriendRequestRequestDto, options?: any): AxiosPromise<FriendRequestDto> {
            return localVarFp.createFriendRequest(createFriendRequestRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * List friend requests of the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFriendRequests(options?: any): AxiosPromise<Set<FriendRequestDto>> {
            return localVarFp.listFriendRequests(options).then((request) => request(axios, basePath));
        },
        /**
         * Change the status of a friend request (ACCEPTED / DENIED)
         * @param {string} requestId 
         * @param {UpdateFriendRequestRequestDto} updateFriendRequestRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFriendRequest(requestId: string, updateFriendRequestRequestDto: UpdateFriendRequestRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateFriendRequest(requestId, updateFriendRequestRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FriendRequestControllerApi - object-oriented interface
 * @export
 * @class FriendRequestControllerApi
 * @extends {BaseAPI}
 */
export class FriendRequestControllerApi extends BaseAPI {
    /**
     * Create a friend request
     * @param {CreateFriendRequestRequestDto} createFriendRequestRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendRequestControllerApi
     */
    public createFriendRequest(createFriendRequestRequestDto: CreateFriendRequestRequestDto, options?: AxiosRequestConfig) {
        return FriendRequestControllerApiFp(this.configuration).createFriendRequest(createFriendRequestRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List friend requests of the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendRequestControllerApi
     */
    public listFriendRequests(options?: AxiosRequestConfig) {
        return FriendRequestControllerApiFp(this.configuration).listFriendRequests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change the status of a friend request (ACCEPTED / DENIED)
     * @param {string} requestId 
     * @param {UpdateFriendRequestRequestDto} updateFriendRequestRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendRequestControllerApi
     */
    public updateFriendRequest(requestId: string, updateFriendRequestRequestDto: UpdateFriendRequestRequestDto, options?: AxiosRequestConfig) {
        return FriendRequestControllerApiFp(this.configuration).updateFriendRequest(requestId, updateFriendRequestRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}
